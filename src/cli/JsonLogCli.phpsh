<?php
/**
 * SimpleComplex PHP JsonLog
 * @link      https://github.com/simplecomplex/php-jsonlog
 * @copyright Copyright (c) 2014-2017 Jacob Friis Mathiasen
 * @license   https://github.com/simplecomplex/php-jsonlog/blob/master/LICENSE (MIT License)
 */
declare(strict_types=1);

namespace SimpleComplex\JsonLog\Cli;

// Find and include Composer autoloader.
(function()
{
    // Executed in [package]/src/cli.
    if (basename($path = getcwd()) == 'cli' && basename(dirname($path)) == 'src') {
        require '../../../../autoload.php';
        return;
    }
    // Executed in document root.
    foreach (['vendor', 'services/vendor', 'backend/vendor', 'php/vendor'] as $dir) {
        if (file_exists($dir) && is_dir($dir)) {
            require $dir . '/autoload.php';
            return;
        }
    }
    echo "\033[01;31m[error]\033[0m Can't locate composer autoload.\nChange dir to this script's dir, and try again.\n";
    exit;
})();

use SimpleComplex\Utils\CliEnvironment;
use SimpleComplex\Utils\CliCommand;
use SimpleComplex\JsonLog\JsonLog;
use SimpleComplex\JsonLog\JsonLogPretty;

/**
 * CLI only.
 *
 * Expose/execute JsonLog 'committable' command.
 *
 * Example:
 * @code
 * cd vendor/simplecomplex/json-log/src/cli
 * # Execute 'committable' command.
 * php JsonLogCli.phpsh committable --enable --commit --verbose
 * @endcode
 *
 * @see JsonLog::committable()
 *
 * Script only class for IDEs to find it. Unknown to Composer autoloader.
 *
 * @package SimpleComplex\JsonLog\Cli
 */
class JsonLogCli
{
    /**
     * Uses CliEnvironment/CliCommand to detect and execute commands.
     */
    public function __construct()
    {
        if (!CliEnvironment::cli()) {
            return;
        }

        // Declare supported commands.
        $environment = CliEnvironment::getInstance(
            new CliCommand(
                'committable',
                'Check/enable JsonLog to write logs.',
                [],
                [
                    'verbose' => 'List success+message+code response.',
                    'enable' => 'Attempt to make committable if not.',
                    'commit' => 'Commit (write to log) on success.',
                    'pretty' => 'Use \'pretty\'-formatted JSON.',
                ],
                [
                    'v' => 'verbose',
                    'e' => 'enable',
                    'c' => 'commit',
                    'p' => 'pretty',
                ]
            )
        );

        // Let environment map command; if first (non-option) console argument
        // one of our commands.
        $command = $environment->command;
        if (!$command) {
            $environment->echoMessage($environment->commandHelp('none'));
        } else {
            switch ($command->name) {
                case 'committable':
                    $verbose = !empty($command->options['verbose']);
                    $logger = empty($command->options['pretty']) ?
                        JsonLog::getInstance() :
                        JsonLogPretty::getInstance();
                    $response = $logger->committable(
                        !empty($command->options['enable']),
                        !empty($command->options['commit']),
                        $verbose
                    );
                    if (!$verbose) {
                        $success = $response;
                    } else {
                        $success = $response['success'];
                    }
                    if (!$verbose) {
                        $msg = !$success ? 'JsonLog is NOT committable.' : 'JsonLog is committable.';
                    } else {
                        $msg = $response['message'];
                        if (!$success) {
                            $msg .= "\n" . 'Code: ' . $response['code'];
                        }
                    }
                    $environment->echoMessage($msg, !$success ? 'warning' : 'success');
                    break;
                default:
                    throw new \LogicException(
                        CliEnvironment::class . ' mapped unknown command ' . $command->name . '.'
                    );
            }
        }
    }
}

new JsonLogCli();
