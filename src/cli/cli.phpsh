<?php
/**
 * SimpleComplex PHP JsonLog
 * @link      https://github.com/simplecomplex/php-jsonlog
 * @copyright Copyright (c) 2014-2017 Jacob Friis Mathiasen
 * @license   https://github.com/simplecomplex/php-jsonlog/blob/master/LICENSE (MIT License)
 */
declare(strict_types=1);

// Include Composer autoloader - re-usable snippet.-----------------------------
(function()
{
    // Executed in [package] dir.
    if (basename(dirname(dirname($path = getcwd()))) == 'vendor') {
        require '../../autoload.php';
        return;
    }
    // Executed in [package]/src/cli.
    elseif (basename($path) == 'cli' && basename(dirname($path)) == 'src') {
        require '../../../../autoload.php';
        return;
    }
    // Executed in document root; one or two stops above 'vendor' dir.
    $vendor_dir = 'vendor';
    $vendor_path = '';
    if (file_exists($vendor_dir) && is_dir($vendor_dir)) {
        $vendor_path = $vendor_dir;
    } else {
        $iter = new \FilesystemIterator('', \FilesystemIterator::FOLLOW_SYMLINKS);
        foreach ($iter as $item) {
            if ($item->isDir()) {
                $path = $item->getPathName();
                $sub_iter = new \FilesystemIterator($path, \FilesystemIterator::FOLLOW_SYMLINKS);
                foreach ($sub_iter as $sub_item) {
                    if ($sub_item->isDir() && $sub_item->getFilename() == $vendor_dir) {
                        $vendor_path = $path . '/' . $vendor_dir;
                        break 2;
                    }
                }
            }
        }
    }
    if ($vendor_path) {
        require $vendor_path . '/autoload.php';
        return;
    }
    echo "\033[01;31m[error]\033[0m Can't locate composer autoload.\nChange dir to this script's dir, and try again.\n";
    exit;
})();
// /Include Composer autoloader - re-usable snippet.----------------------------


// Work.------------------------------------------------------------------------
use SimpleComplex\Utils\CliEnvironment;
use SimpleComplex\Utils\Dependency;
use SimpleComplex\JsonLog\CliJsonLog;

/**
 * Exposes JsonLog CLI commands.
 *
 * Only function for IDE to find this script.
 * This file is unknown to Composer autoloader.
 *
 * @code
 * # CLI
 * cd vendor/simplecomplex/json-log/src/cli
 * php cli.phpsh json-log -h
 * @endcode
 *
 * @return mixed
 *      Return value of the executed command, if any.
 *      May well exit.
 */
function simplecomplex_json_log_cli()
{
    $container = Dependency::container();
    if (class_exists('\\SimpleComplex\\Cache\\CacheBroker')) {
        Dependency::genericSet('cache-broker', function() {
            return new \SimpleComplex\Cache\CacheBroker();
        });
    }
    if (class_exists('\\SimpleComplex\\Config\\Config')) {
        Dependency::genericSet('config', function() {
            return new \SimpleComplex\Config\Config('global');
        });
    }
    Dependency::genericSet('logger', function() use ($container) {
        return new \SimpleComplex\JsonLog\JsonLog($container->has('config') ? $container->get('config') : null);
    });
    if (class_exists('\\SimpleComplex\\Inspect\\Inspect')) {
        Dependency::genericSet('inspector', function() use ($container) {
            return new \SimpleComplex\Inspect\Inspect($container->has('config') ? $container->get('config') : null);
        });
    }

    set_exception_handler(function(\Throwable $throwable) use ($container) {
        $container = Dependency::container();
        $trace = null;
        if ($container->has('inspector')) {
            $trace = '' . $container->get('inspector')->trace($throwable);
        }
        if ($container->has('logger')) {
            $container->get('logger')->error($trace ?? $throwable);
        }
        echo ($trace ?? $throwable) . "\n"; exit;
    });

    // Declares JsonLog's CLI commands, and registers them to CliEnvironment.
    new CliJsonLog();

    // Let CliEnvironment listen to input and forward matched command
    // to it's provider (in this case CliJsonLog or CliEnvironment self).
    return CliEnvironment::getInstance()->forwardMatchedCommand();
}
simplecomplex_json_log_cli();
